// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Response {
  url      String @id
  response String
}

model Genre {
  malId Int    @id
  name  String @unique
}

model SkipTime {
  type                String
  start               Float
  end                 Float
  Episode             Episode? @relation(fields: [episodeAnimeKitsuId, episodeNumber], references: [animeKitsuId, number])
  episodeAnimeKitsuId Int
  episodeNumber       Int

  @@id([episodeAnimeKitsuId, episodeNumber, type])
}

model Episode {
  title        String
  id           Int
  animeKitsuId Int
  number       Int
  watchTime    Float      @default(0)
  source       String     @default("")
  skipTimes    SkipTime[]
  anime        Anime      @relation(fields: [animeKitsuId], references: [kitsuId])
  lastUpdated  DateTime   @default(now()) @updatedAt
  length       Float?

  @@id([animeKitsuId, number])
}

model AnimeRelation {
  role          String
  sourceId      Int
  anime         Anime  @relation(fields: [destinationId], references: [kitsuId])
  destinationId Int

  @@id([sourceId, destinationId])
}

model Preferences {
  id          Int     @id
  accentColor String?
  genres      String?
}

model Anime {
  kitsuId     Int     @id
  malId       Int?    @unique
  synopsis    String
  ageRating   String
  available   Boolean @default(true)
  type        String  @default("")
  title_en    String?
  liked       Boolean @default(false)
  title_jp    String?
  zeroEpisode Boolean @default(false)
  title       String
  posterImg   String
  coverImg    String?
  genres      String // comma seperated values
  score       Float
  episodes    Int
  slug        String?
  dubSlug     String?
  poster      Int?

  lastUpdated DateTime        @default(now()) @updatedAt
  relation    AnimeRelation[]
  Episode     Episode[]
}
